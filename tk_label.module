<?php
/**
 * @file
 * Code for the TK Label feature.
 */

include_once 'tk_label.features.inc';

/**
 * Get taxonomies by the value of the Label URI field and xlinks from XML.
 */
function tk_label_retrieve_term(array $xlinks) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', 'tk_label', '=')
        ->fieldCondition('field_label_uri', 'value', $xlinks, 'IN');
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $tids = array_keys($result['taxonomy_term']);
    $terms = taxonomy_term_load_multiple($tids);
    return $terms;
  }

  return array();
}

/**
 * Get taxonomy by the field value.
 */
function tk_label_get_term_by_field_value($vid, $field_name, $field_value) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', $vid, '=')
        ->fieldCondition($field_name, 'value', $field_value, '=');
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $tid = reset(array_keys($result['taxonomy_term']));
    $term = taxonomy_term_load($tid);
    return $term;
  }

  return array();
}

/**
 * Build tk_label links.
 */
function tk_label_render_link_icon($terms) {
  $build = '';
  foreach ($terms as $term) {
    $url = field_get_items('taxonomy_term', $term, 'field_label_uri');
    $icon = field_get_items('taxonomy_term', $term, 'field_label_icon');
    $img = array(
      '#theme' => 'image_style',
      '#style_name' => 'icon',
      '#path' => $icon[0]['uri'],
      '#alt' => $icon[0]['alt'],
      '#title' => $icon[0]['title'],
    );
    $link = array(
      '#theme' => 'link',
      '#text' => drupal_render($img),
      '#path' => $url[0]['value'],
      '#options' => array(
        'attributes' => array('class' => array('tk-link')),
        'html' => TRUE,
      ),
    );
    $build .= drupal_render($link);
  }

  return $build;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function tk_label_form_xml_form_builder_datastream_form_alter(&$form, &$form_state, $form_id) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('tk_label');
  $terms = !empty($vocabulary) ? taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid)) : array();
  $options = array('' => '- None -');
  foreach ($terms as $term) {
    $field_label_uri = field_get_items('taxonomy_term', $term, 'field_label_uri');
    $options[$field_label_uri[0]['value']] = $term->name;
  }
  foreach ($form['tk_labels'] as $key => $tkLabel) {
    if (is_array($tkLabel) && $tkLabel['#type'] == 'tabpanel') {
      $form['tk_labels'][$key]['tk_label']['#options'] = $options;
      $form['tk_labels'][$key]['tk_label']['#array_key'] = $key;
      $form['tk_labels'][$key]['tk_label']['#ajax'] = array(
        'callback' => 'tk_label_change_description_ajax_callback',
        'wrapper' => 'tk-labels-accessionCondition-' . $key,
        'method' => 'replace',
      );
      $form['tk_labels'][$key]['accessionCondition']['#prefix'] = '<div id="tk-labels-accessionCondition-'. $key . '">';
      $form['tk_labels'][$key]['accessionCondition']['#suffix'] = '</div>';
      $form['tk_labels'][$key]['type']['#type'] = 'hidden';
    }
  }
  array_unshift($form['update']['#submit'], 'tk_label_xml_form_builder_datastream_set_right_information_form_submit');
  $form['update']['#submit'][] = 'tk_label_xml_form_builder_datastream_form_metadata_form_submit';
}

/**
 * Ajax callback to change the value of the Rights Information field when
 * changing the TK Label URI value.
 */
function tk_label_change_description_ajax_callback($form, &$form_state) {
  $element = $form_state['triggering_element'];
  $term = tk_label_get_term_by_field_value('tk_label', 'field_label_uri', $element['#default_value']);
  $field_description = field_get_items('taxonomy_term', $term, 'description_field');
  $description = strip_tags($field_description[0]['value']);
  $form['tk_labels'][$element['#array_key']]['accessionCondition']['#value'] = $description;
  $form_state['values']['tk_labels'][$element['#array_key']]['accessionCondition'] = $description;
  return $form['tk_labels'][$element['#array_key']]['accessionCondition'];
}


/**
 * Set the value for the field "accessionCondition" depending on the selected tk_label.
 */
function tk_label_xml_form_builder_datastream_set_right_information_form_submit(array $form, array &$form_state) {
  if (!empty($form_state['values']['tk_labels'])) {
    $tk_labels = $form_state['values']['tk_labels'];
    foreach ($tk_labels as $key => $label) {
      $term = tk_label_get_term_by_field_value('tk_label', 'field_label_uri', $label['tk_label']);
      $field_description = field_get_items('taxonomy_term', $term, 'description_field');
      $description = strip_tags($field_description[0]['value']);
      $form_state['values']['tk_labels'][$key]['accessionCondition'] = $description;
    }
  }
}

/**
 * Updates the datastream's content with generated xml from the metadata form.
 *
 * Also updates the objects label, and applies a transform to update the DC.
 *
 * @param array $form
 *   The drupal form.
 * @param array $form_state
 *   The drupal form state.
 *
 * @throws \Exception
 */
function tk_label_xml_form_builder_datastream_form_metadata_form_submit(array $form, array &$form_state) {
  if (!empty($form_state['values']['tk_labels'])) {
    $form_state['redirect'] = FALSE;
    $object = islandora_object_load($form_state['pid']);
    $children = cwrc_search_get_children_objects($object);
    if (!empty($children)) {
      $batch = array(
        'operations' => array(),
        'finished' => 'tk_label_xml_form_builder_datastream_form_batch_finished',
        'title' => t('The process of saving "TK Labels" tags from current object to child objects'),
        'init_message' => t('Starting...'),
        'progress_message' => t('Processed @current out of @total.'),
      );

      $tk_labels = $form_state['values']['tk_labels'];
      foreach ($children as $child) {
        $batch['operations'][] = array('tk_label_xml_datastream_save_metadata_to_object', array($child, $tk_labels));
      }

      // Run the batch.
      batch_set($batch);
      batch_process("islandora/object/{$object->id}");
    }
    else {
      $form_state['redirect'] = "islandora/object/{$object->id}";
    }
  }
}

/**
 * Batch Operation Callback for saving "TK Labels" tags from current object to
 * child objects.
 */
function tk_label_xml_datastream_save_metadata_to_object($child, $tk_labels, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['results']['progress'] = 0;
  }

  $mods = islandora_datastream_load('MODS', $child['object']['value']);
  if (!empty($mods)) {
    $namespace = 'http://www.loc.gov/mods/v3';
    $doc = new DOMDocument();
    $doc->loadXML($mods->content);
    $xpath = new DOMXPath($doc);
    $xpath->registerNamespace('mods', $namespace);
    // Remove all instances of mods:accessCondition and mods:physicalDescription
    // from every mods:mods element instance.
    $results = $xpath->query('//mods:accessCondition[@displayLabel="inherited"]');
    foreach ($results as $result) {
      $result->parentNode->removeChild($result);
    }
    // Regardless of the number of mods:mods elements in the document we only
    // add the usage and version to the first one.
    $results = $xpath->query('//mods:mods[1]');

    // Get parent element.
    if ($results->length == 0) {
      $refuse_msg = t('Refusing to add usage and publication version statements alone');
      drupal_set_message(
        t('Could not find MODS element in object @pid is empty. %refuse.',
          array('@pid' => $child['object']['value'], '%refuse' => $refuse_msg)),
        'error');
      return;
    }
    $mods_element = $results->item(0);

    foreach ($tk_labels as $label) {
      $access_condition_query = '//mods:accessCondition[@xlink:href="' . $label['tk_label'] . '"]';
      $access_condition_element = $xpath->query($access_condition_query);
      if ($access_condition_element->length == 0) {
        // Add the new mods:accessCondition to the first mods:mods element.
        $access_condition_element = $doc->createElementNS($namespace, 'accessCondition');
        $access_condition_element->setAttribute('type', 'use and reproduction');
        $access_condition_element->setAttribute('xlink:href', $label['tk_label']);
        $access_condition_element->setAttribute('displayLabel', 'inherited');
        $access_condition_element->nodeValue = $label['accessionCondition'];
        $mods_element->appendChild($access_condition_element);
        $context['results']['progress']++;
      }
    }
    $mods->setContentFromString($doc->saveXML());
  }
}

/**
 * Finished saving "TK Labels" tags from current object to child objects.
 *
 * Callback for batch_set().
 *
 * @param bool $success
 *   A boolean indicating whether the batch operation successfully concluded.
 * @param int $results
 *   The results from the batch process.
 * @param array $operations
 *   The batch operations that remained unprocessed. Only relevant if $success
 *   is FALSE.
 *
 * @see tk_label_xml_form_builder_datastream_form_metadata_form_submit()
 *
 * @ingroup callbacks
 *
 * @throws \Exception
 */
function tk_label_xml_form_builder_datastream_form_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Successfully added the tags "TK Labels" from the current object to @count child objects.', array('@count' => $results['progress'])));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}
